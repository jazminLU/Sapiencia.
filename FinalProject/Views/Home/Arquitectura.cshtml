@{
    ViewData["Title"] = "Arquitectura";
}

<div class="text-center">
    <h1>@ViewData["Message"]</h1>
    <p>Contenido adicional relacionado con Arquitectura.</p>
</div>

<div class="neon-calculator">
    <div class="output-group">
        <label for="decimalInput">Decimal:</label>
        <input type="number" id="decimalInput" oninput="convertFromDecimal()" placeholder="Ingrese decimal" />
    </div>

    <div class="output-group">
        <label>Binario:</label>
        <input type="text" id="binaryOutput" readonly placeholder="Resultado en binario">
    </div>

    <div class="output-group">
        <label>Hexadecimal:</label>
        <input type="text" id="hexOutput" readonly placeholder="Resultado en hexadecimal">
    </div>

    <div class="output-group">
        <label>IEEE 754 (32 bits):</label>
        <input type="text" id="ieee32Output" readonly placeholder="Resultado en IEEE 754 (32 bits)">
    </div>

    <div class="output-group">
        <label>IEEE 754 (64 bits):</label>
        <input type="text" id="ieee64Output" readonly placeholder="Resultado en IEEE 754 (64 bits)">
    </div>
</div>

<style>
    /* General */
    body {
        background-color: #1a1a1d;
        color: #ffffff;
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        overflow: hidden;
    }

    /* Neon Calculator */
    .neon-calculator {
        background-color: #1a1a1d;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0px 0px 20px rgba(0, 255, 255, 0.5);
        text-align: center;
        width: 700px; /* Aumenta este valor si quieres hacerlo aún más ancho */
    }

    /* Output Group */
    .output-group {
        margin-top: 15px;
    }

    .output-group label {
        font-size: 14px;
        color: #0ff;
        text-shadow: 0px 0px 5px #0ff;
        display: block;
        margin-bottom: 5px;
    }

    .output-group input {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        background-color: #333;
        color: #0ff;
        border: none;
        border-radius: 5px;
        text-align: left;
        box-shadow: 0px 0px 10px #0ff;
    }

    input[type="text"]:read-only {
        background-color: #333;
    }

    /* Ampliación del ancho para IEEE 754 */
    #ieee32Output, #ieee64Output {
        font-size: 14px;
    }


</style>

<script>function convertFromDecimal() {
        const decimalValue = parseFloat(document.getElementById("decimalInput").value);

        if (!isNaN(decimalValue)) {
            // Convertir a binario y hexadecimal
            document.getElementById("binaryOutput").value = decimalValue.toString(2);
            document.getElementById("hexOutput").value = decimalValue.toString(16).toUpperCase();

            // Convertir a IEEE 754
            document.getElementById("ieee32Output").value = convertToIEEE754(decimalValue, 32);
            document.getElementById("ieee64Output").value = convertToIEEE754(decimalValue, 64);
        } else {
            document.getElementById("binaryOutput").value = "";
            document.getElementById("hexOutput").value = "";
            document.getElementById("ieee32Output").value = "";
            document.getElementById("ieee64Output").value = "";
        }
    }

    function convertToIEEE754(number, bits) {
        let sign, exponent, mantissa, e, m;

        if (number === 0) {
            return bits === 32 ? "00000000000000000000000000000000" : "0000000000000000000000000000000000000000000000000000000000000000";
        }

        sign = number < 0 ? 1 : 0;
        number = Math.abs(number);

        if (bits === 32) {
            e = 127;
            m = 23;
        } else {
            e = 1023;
            m = 52;
        }

        let log2 = Math.floor(Math.log2(number));
        exponent = log2 + e;
        let fractionalPart = number / Math.pow(2, log2) - 1;

        mantissa = "";
        for (let i = 0; i < m; i++) {
            fractionalPart *= 2;
            if (fractionalPart >= 1) {
                mantissa += "1";
                fractionalPart -= 1;
            } else {
                mantissa += "0";
            }
        }

        exponent = exponent.toString(2).padStart(bits === 32 ? 8 : 11, "0");
        return sign + exponent + mantissa;
    }</script>
